name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/bicep/**'
      - 'infrastructure/scripts/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
          - dev
      deploy_backend:
        description: 'Deploy WordPress backend infrastructure'
        required: false
        default: 'true'
        type: boolean
      enable_monitoring:
        description: 'Enable monitoring and logging'
        required: false
        default: 'true'
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  PROJECT_NAME: 'wordpress-nextjs'
  AZURE_LOCATION: 'eastus'
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME || 'example.com' }}

jobs:
  validate-templates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Validate Bicep templates
      run: |
        echo "Validating Bicep templates..."
        
        # Install Bicep CLI
        az bicep install
        
        # Validate main template
        az bicep build --file infrastructure/bicep/main.bicep
        
        # Validate individual modules
        for template in infrastructure/bicep/*.bicep; do
          if [ "$template" != "infrastructure/bicep/main.bicep" ]; then
            echo "Validating $template..."
            az bicep build --file "$template"
          fi
        done
        
        echo "✅ All Bicep templates are valid"

  determine-environment:
    runs-on: ubuntu-latest
    needs: validate-templates
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource_group: ${{ steps.env.outputs.resource_group }}
      deploy_backend: ${{ steps.env.outputs.deploy_backend }}
      enable_monitoring: ${{ steps.env.outputs.enable_monitoring }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Determine deployment parameters
      id: env
      run: |
        # Determine environment
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
          DEPLOY_BACKEND="${{ github.event.inputs.deploy_backend }}"
          ENABLE_MONITORING="${{ github.event.inputs.enable_monitoring }}"
          FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="staging"
          DEPLOY_BACKEND="true"
          ENABLE_MONITORING="true"
          FORCE_DEPLOY="false"
        else
          ENV="dev"
          DEPLOY_BACKEND="true"
          ENABLE_MONITORING="false"
          FORCE_DEPLOY="false"
        fi
        
        RESOURCE_GROUP="${PROJECT_NAME}-${ENV}-rg"
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "deploy_backend=$DEPLOY_BACKEND" >> $GITHUB_OUTPUT
        echo "enable_monitoring=$ENABLE_MONITORING" >> $GITHUB_OUTPUT
        
        # Check for infrastructure changes
        if [ "$FORCE_DEPLOY" = "true" ]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "Forced deployment requested"
        elif git diff --quiet HEAD~1 HEAD -- infrastructure/; then
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "No infrastructure changes detected"
        else
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "Infrastructure changes detected"
        fi
        
        echo "Environment: $ENV"
        echo "Resource Group: $RESOURCE_GROUP"
        echo "Deploy Backend: $DEPLOY_BACKEND"
        echo "Enable Monitoring: $ENABLE_MONITORING"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Generate secure passwords
      id: passwords
      run: |
        # Generate secure passwords for MySQL and WordPress
        MYSQL_PASSWORD=$(openssl rand -base64 32 | tr -d "/+=" | cut -c1-25)
        WORDPRESS_DB_PASSWORD=$(openssl rand -base64 32 | tr -d "/+=" | cut -c1-25)
        
        echo "::add-mask::$MYSQL_PASSWORD"
        echo "::add-mask::$WORDPRESS_DB_PASSWORD"
        
        echo "mysql_password=$MYSQL_PASSWORD" >> $GITHUB_OUTPUT
        echo "wordpress_db_password=$WORDPRESS_DB_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Create resource group
      run: |
        RESOURCE_GROUP="${{ needs.determine-environment.outputs.resource_group }}"
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        echo "Creating resource group: $RESOURCE_GROUP"
        
        az group create \
          --name "$RESOURCE_GROUP" \
          --location "${{ env.AZURE_LOCATION }}" \
          --tags \
            Environment="$ENVIRONMENT" \
            Project="${{ env.PROJECT_NAME }}" \
            ManagedBy="GitHubActions" \
            Repository="${{ github.repository }}" \
            Commit="${{ github.sha }}"
    
    - name: Deploy infrastructure
      id: deploy
      run: |
        RESOURCE_GROUP="${{ needs.determine-environment.outputs.resource_group }}"
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        DEPLOYMENT_NAME="${PROJECT_NAME}-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)"
        
        echo "Deploying infrastructure..."
        echo "Deployment name: $DEPLOYMENT_NAME"
        
        # Deploy using Bicep template
        az deployment group create \
          --resource-group "$RESOURCE_GROUP" \
          --template-file "infrastructure/bicep/main.bicep" \
          --name "$DEPLOYMENT_NAME" \
          --parameters \
            environment="$ENVIRONMENT" \
            projectName="${{ env.PROJECT_NAME }}" \
            location="${{ env.AZURE_LOCATION }}" \
            domainName="${{ env.DOMAIN_NAME }}" \
            deployWordPressBackend="${{ needs.determine-environment.outputs.deploy_backend }}" \
            enableMonitoring="${{ needs.determine-environment.outputs.enable_monitoring }}" \
            mysqlAdminPassword="${{ steps.passwords.outputs.mysql_password }}" \
            wordpressDbPassword="${{ steps.passwords.outputs.wordpress_db_password }}" \
          --output table
        
        echo "deployment_name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
    
    - name: Get deployment outputs
      id: outputs
      run: |
        RESOURCE_GROUP="${{ needs.determine-environment.outputs.resource_group }}"
        DEPLOYMENT_NAME="${{ steps.deploy.outputs.deployment_name }}"
        
        echo "Retrieving deployment outputs..."
        
        # Get all outputs
        STATIC_URL=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query properties.outputs.staticWebsiteUrl.value -o tsv)
        
        FRONT_DOOR_URL=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query properties.outputs.frontDoorEndpoint.value -o tsv)
        
        STORAGE_ACCOUNT=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query properties.outputs.storageAccountName.value -o tsv)
        
        KEY_VAULT=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query properties.outputs.keyVaultName.value -o tsv)
        
        echo "static_url=$STATIC_URL" >> $GITHUB_OUTPUT
        echo "front_door_url=$FRONT_DOOR_URL" >> $GITHUB_OUTPUT
        echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
        echo "key_vault=$KEY_VAULT" >> $GITHUB_OUTPUT
        
        # Get backend outputs if backend was deployed
        if [ "${{ needs.determine-environment.outputs.deploy_backend }}" = "true" ]; then
          WORDPRESS_URL=$(az deployment group show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$DEPLOYMENT_NAME" \
            --query properties.outputs.wordpressBackendUrl.value -o tsv)
          
          MYSQL_SERVER=$(az deployment group show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$DEPLOYMENT_NAME" \
            --query properties.outputs.mysqlServerName.value -o tsv)
          
          REDIS_HOST=$(az deployment group show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$DEPLOYMENT_NAME" \
            --query properties.outputs.redisHostname.value -o tsv)
          
          echo "wordpress_url=$WORDPRESS_URL" >> $GITHUB_OUTPUT
          echo "mysql_server=$MYSQL_SERVER" >> $GITHUB_OUTPUT
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT
        fi
        
        # Get monitoring outputs if monitoring was enabled
        if [ "${{ needs.determine-environment.outputs.enable_monitoring }}" = "true" ]; then
          APP_INSIGHTS_KEY=$(az deployment group show \
            --resource-group "$RESOURCE_GROUP" \
            --name "$DEPLOYMENT_NAME" \
            --query properties.outputs.applicationInsightsInstrumentationKey.value -o tsv)
          
          echo "app_insights_key=$APP_INSIGHTS_KEY" >> $GITHUB_OUTPUT
        fi
    
    - name: Configure static website hosting
      run: |
        STORAGE_ACCOUNT="${{ steps.outputs.outputs.storage_account }}"
        
        echo "Configuring static website hosting for: $STORAGE_ACCOUNT"
        
        # Enable static website hosting
        az storage blob service-properties update \
          --account-name "$STORAGE_ACCOUNT" \
          --static-website \
          --404-document "404.html" \
          --index-document "index.html"
        
        # Set CORS rules
        az storage cors add \
          --account-name "$STORAGE_ACCOUNT" \
          --services b \
          --methods GET HEAD OPTIONS \
          --origins "https://${{ env.DOMAIN_NAME }}" "https://*.${{ env.DOMAIN_NAME }}" \
          --allowed-headers "*" \
          --exposed-headers "*" \
          --max-age 86400
    
    - name: Save deployment information
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        # Create deployment info file
        cat > "deployment-info-${ENVIRONMENT}.json" << EOF
        {
          "environment": "$ENVIRONMENT",
          "resourceGroup": "${{ needs.determine-environment.outputs.resource_group }}",
          "location": "${{ env.AZURE_LOCATION }}",
          "deploymentName": "${{ steps.deploy.outputs.deployment_name }}",
          "storageAccount": "${{ steps.outputs.outputs.storage_account }}",
          "staticWebsiteUrl": "${{ steps.outputs.outputs.static_url }}",
          "frontDoorUrl": "${{ steps.outputs.outputs.front_door_url }}",
          "keyVault": "${{ steps.outputs.outputs.key_vault }}",
          "wordpressUrl": "${{ steps.outputs.outputs.wordpress_url || '' }}",
          "mysqlServer": "${{ steps.outputs.outputs.mysql_server || '' }}",
          "redisHost": "${{ steps.outputs.outputs.redis_host || '' }}",
          "applicationInsightsKey": "${{ steps.outputs.outputs.app_insights_key || '' }}",
          "deployedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "workflow": "${{ github.workflow }}",
          "runId": "${{ github.run_id }}"
        }
        EOF
        
        echo "Deployment information saved"
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info-${{ needs.determine-environment.outputs.environment }}
        path: deployment-info-*.json
        retention-days: 30
    
    - name: Validate deployment
      run: |
        echo "Running deployment validation..."
        
        # Test static website accessibility
        STATIC_URL="${{ steps.outputs.outputs.static_url }}"
        if [ -n "$STATIC_URL" ]; then
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STATIC_URL" || echo "000")
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "404" ]; then
            echo "✅ Static website is accessible"
          else
            echo "⚠️  Static website returned HTTP $HTTP_STATUS"
          fi
        fi
        
        # Test Front Door endpoint
        FRONT_DOOR_URL="${{ steps.outputs.outputs.front_door_url }}"
        if [ -n "$FRONT_DOOR_URL" ]; then
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FRONT_DOOR_URL" || echo "000")
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "404" ]; then
            echo "✅ Front Door endpoint is accessible"
          else
            echo "⚠️  Front Door endpoint returned HTTP $HTTP_STATUS"
          fi
        fi
        
        # Test WordPress backend if deployed
        if [ "${{ needs.determine-environment.outputs.deploy_backend }}" = "true" ]; then
          WORDPRESS_URL="${{ steps.outputs.outputs.wordpress_url }}"
          if [ -n "$WORDPRESS_URL" ]; then
            # Wait for WordPress to start
            sleep 60
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$WORDPRESS_URL/wp-admin/install.php" || echo "000")
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ WordPress backend is accessible"
            else
              echo "⚠️  WordPress backend returned HTTP $HTTP_STATUS"
            fi
          fi
        fi
    
    - name: Deployment summary
      run: |
        echo ""
        echo "========================================"
        echo "       INFRASTRUCTURE DEPLOYMENT"
        echo "========================================"
        echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
        echo "Resource Group: ${{ needs.determine-environment.outputs.resource_group }}"
        echo "Location: ${{ env.AZURE_LOCATION }}"
        echo ""
        echo "STATIC HOSTING:"
        echo "  Storage Account: ${{ steps.outputs.outputs.storage_account }}"
        echo "  Static Website: ${{ steps.outputs.outputs.static_url }}"
        echo "  Front Door CDN: ${{ steps.outputs.outputs.front_door_url }}"
        echo ""
        if [ "${{ needs.determine-environment.outputs.deploy_backend }}" = "true" ]; then
          echo "WORDPRESS BACKEND:"
          echo "  WordPress URL: ${{ steps.outputs.outputs.wordpress_url }}"
          echo "  MySQL Server: ${{ steps.outputs.outputs.mysql_server }}"
          echo "  Redis Cache: ${{ steps.outputs.outputs.redis_host }}"
          echo ""
        fi
        echo "SECURITY:"
        echo "  Key Vault: ${{ steps.outputs.outputs.key_vault }}"
        echo ""
        echo "NEXT STEPS:"
        echo "1. Configure DNS records for your domain"
        echo "2. Deploy frontend application"
        if [ "${{ needs.determine-environment.outputs.deploy_backend }}" = "true" ]; then
          echo "3. Deploy WordPress backend"
          echo "4. Configure WordPress settings"
        fi
        echo "========================================"

  no-changes:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'false'
    
    steps:
    - name: Notify no changes
      run: |
        echo "ℹ️  No infrastructure changes detected, skipping deployment"
        echo "Use 'force_deploy: true' to deploy anyway"
        echo "Environment: ${{ needs.determine-environment.outputs.environment }}"

  cleanup:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "❌ Infrastructure deployment failed"
        echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
        echo "Resource Group: ${{ needs.determine-environment.outputs.resource_group }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow Run: ${{ github.run_id }}"
        echo ""
        echo "Check the deployment logs above for detailed error information."
        echo "You may need to manually clean up any partially created resources."
