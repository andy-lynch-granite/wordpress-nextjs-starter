name: Deploy to Development (Simple)

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-simple-dev.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build and export Next.js application
      working-directory: frontend
      env:
        NEXT_PUBLIC_WORDPRESS_API_URL: https://wordpressnextjs-dev-wordpress.ashyrock-47f94abe.northeurope.azurecontainerapps.io/graphql
      run: |
        # Build the Next.js application for static export with WordPress API
        echo "Building Next.js application with WordPress API..."
        echo "WordPress API URL: $NEXT_PUBLIC_WORDPRESS_API_URL"
        npm run build
        
        # Verify the build output
        echo "Build completed. Checking output directory..."
        ls -la out/
        
        # Verify index.html exists
        if [ ! -f "out/index.html" ]; then
          echo "Error: index.html not found in out/ directory"
          exit 1
        fi
        
        echo "‚úÖ Static export completed successfully"
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Configure Azure Storage for static website hosting
      run: |
        echo "Ensuring static website hosting is enabled..."
        
        # Enable static website hosting
        az storage blob service-properties update \
          --account-name "${{ secrets.DEV_STORAGE_ACCOUNT }}" \
          --static-website \
          --index-document "index.html" \
          --404-document "404.html" \
          --auth-mode login
        
        echo "‚úÖ Static website hosting configured"
    
    - name: Deploy to Azure Storage
      working-directory: frontend
      run: |
        echo "Deploying to storage account: ${{ secrets.DEV_STORAGE_ACCOUNT }}"
        echo "Source directory contents:"
        find out -type f | head -20
        
        # Deploy all files from out directory to Azure Storage static website container
        az storage blob upload-batch \
          --account-name "${{ secrets.DEV_STORAGE_ACCOUNT }}" \
          --destination '$web' \
          --source out \
          --overwrite \
          --auth-mode login
        
        echo "‚úÖ Files uploaded to Azure Storage successfully"
        
        # Set proper content types for CSS and JS files
        echo "Setting content types for static assets..."
        
        # List uploaded files for verification
        echo "Uploaded files:"
        az storage blob list \
          --account-name "${{ secrets.DEV_STORAGE_ACCOUNT }}" \
          --container-name '$web' \
          --auth-mode login \
          --output table | head -10
        
        # Verify index.html exists
        if az storage blob show \
           --account-name "${{ secrets.DEV_STORAGE_ACCOUNT }}" \
           --container-name '$web' \
           --name index.html \
           --auth-mode login &> /dev/null; then
          echo "‚úÖ index.html uploaded successfully"
        else
          echo "‚ùå index.html not found in storage"
          exit 1
        fi
    
    - name: Validate deployment
      run: |
        SITE_URL="https://${{ secrets.DEV_DOMAIN_NAME }}"
        
        echo "Testing site accessibility: $SITE_URL"
        
        # Wait for propagation
        echo "Waiting for Azure CDN propagation..."
        sleep 30
        
        # Test site accessibility with retry logic
        RETRY_COUNT=0
        MAX_RETRIES=5
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Site is accessible (HTTP $HTTP_STATUS)"
            
            # Test if it's actually the Next.js content
            CONTENT=$(curl -s "$SITE_URL" | head -1)
            if echo "$CONTENT" | grep -q "<!DOCTYPE html>"; then
              echo "‚úÖ Valid HTML content detected"
            else
              echo "‚ö†Ô∏è Unexpected content format"
            fi
            
            break
          else
            echo "‚ö†Ô∏è Site returned HTTP $HTTP_STATUS"
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Site validation failed after $MAX_RETRIES attempts"
          exit 1
        fi
    
    - name: Deployment summary
      if: success()
      run: |
        echo "üöÄ Development deployment completed successfully!"
        echo "Site URL: https://${{ secrets.DEV_DOMAIN_NAME }}"
        echo "Storage Account: ${{ secrets.DEV_STORAGE_ACCOUNT }}"
        echo "Resource Group: ${{ secrets.DEV_RESOURCE_GROUP }}"
        echo "Build: ${{ github.sha }}"