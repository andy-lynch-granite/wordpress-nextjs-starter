version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: headless_wp_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infrastructure/docker/mysql/init:/docker-entrypoint-initdb.d
      - ./infrastructure/docker/mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - headless_wp_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: headless_wp_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - headless_wp_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      timeout: 10s
      retries: 5

  # WordPress Backend
  wordpress:
    build:
      context: ./infrastructure/docker/wordpress
      dockerfile: Dockerfile
      args:
        - WP_VERSION=6.4
        - PHP_VERSION=8.2
    container_name: headless_wp_backend
    restart: unless-stopped
    environment:
      # Database Configuration
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
      
      # WordPress Configuration
      WORDPRESS_DEBUG: 1
      WORDPRESS_DEBUG_LOG: 1
      WORDPRESS_DEBUG_DISPLAY: 0
      
      # Redis Configuration
      WP_REDIS_HOST: redis
      WP_REDIS_PORT: 6379
      WP_REDIS_PASSWORD: redis_password
      WP_REDIS_DATABASE: 0
      
      # GraphQL Configuration
      GRAPHQL_DEBUG: 1
      
      # Security
      WORDPRESS_CONFIG_EXTRA: |
        define('FORCE_SSL_ADMIN', false);
        define('WP_ALLOW_REPAIR', true);
        define('AUTOMATIC_UPDATER_DISABLED', true);
        define('WP_AUTO_UPDATE_CORE', false);
        define('DISALLOW_FILE_EDIT', true);
        define('WP_DEBUG', true);
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', false);
        define('SCRIPT_DEBUG', true);
        define('SAVEQUERIES', true);
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PORT', 6379);
        define('WP_REDIS_PASSWORD', 'redis_password');
        define('WP_REDIS_DATABASE', 0);
        define('GRAPHQL_DEBUG', true);
    volumes:
      # WordPress core files (managed by container)
      - wordpress_data:/var/www/html
      
      # Custom themes and plugins (mounted for development)
      - ./wordpress/themes:/var/www/html/wp-content/themes/custom
      - ./wordpress/plugins:/var/www/html/wp-content/plugins/custom
      
      # Uploads directory (persistent)
      - ./wordpress/uploads:/var/www/html/wp-content/uploads
      
      # Configuration files
      - ./infrastructure/docker/wordpress/php.ini:/usr/local/etc/php/conf.d/custom.ini
      - ./infrastructure/docker/wordpress/wp-config-local.php:/var/www/html/wp-config-local.php
      
      # Logs
      - ./logs/wordpress:/var/log/wordpress
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - headless_wp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/admin-ajax.php"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_VERSION=18
    container_name: headless_wp_frontend
    restart: unless-stopped
    environment:
      # Next.js Configuration
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      
      # WordPress API Configuration
      NEXT_PUBLIC_WORDPRESS_URL: http://localhost:8080
      NEXT_PUBLIC_GRAPHQL_ENDPOINT: http://localhost:8080/graphql
      
      # Internal network URLs (for SSR)
      WORDPRESS_INTERNAL_URL: http://wordpress
      GRAPHQL_INTERNAL_ENDPOINT: http://wordpress/graphql
      
      # Development Configuration
      NEXT_PUBLIC_DEVELOPMENT_MODE: true
      NEXT_PUBLIC_DEBUG_MODE: true
    volumes:
      # Source code (for hot reloading)
      - ./frontend:/app
      
      # Node modules (performance optimization)
      - frontend_node_modules:/app/node_modules
      
      # Next.js cache (persistent for faster rebuilds)
      - frontend_next_cache:/app/.next
      
      # Logs
      - ./logs/frontend:/app/logs
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugger
    depends_on:
      wordpress:
        condition: service_healthy
    networks:
      - headless_wp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # Development Tools Container
  devtools:
    build:
      context: ./infrastructure/docker/devtools
      dockerfile: Dockerfile
    container_name: headless_wp_devtools
    restart: "no"
    profiles: ["dev"]
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: root_password
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      WORDPRESS_URL: http://wordpress
    volumes:
      - ./:/workspace
      - devtools_cache:/root/.cache
    networks:
      - headless_wp_network
    depends_on:
      - mysql
      - redis
      - wordpress
    command: tail -f /dev/null

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: headless_wp_mailhog
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - headless_wp_network

  # phpMyAdmin (Database management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    container_name: headless_wp_phpmyadmin
    restart: unless-stopped
    profiles: ["dev"]
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: root_password
      UPLOAD_LIMIT: 1G
    ports:
      - "8081:80"
    depends_on:
      - mysql
    networks:
      - headless_wp_network

  # Redis Commander (Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: headless_wp_redis_commander
    restart: unless-stopped
    profiles: ["dev"]
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - headless_wp_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  wordpress_data:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next_cache:
    driver: local
  devtools_cache:
    driver: local

networks:
  headless_wp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
